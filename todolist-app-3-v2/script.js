Vue.component('task', {
    props: ['data'],
    methods: {
        changeTaskStatus() {
            this.$emit('change-task-status');
        },

        toggleTaskEditing() {
            this.$emit('toggle-task-editing');
        }
    },
    template: `
    <div class="task" :class="{done: data.isDone}">
        <input type="checkbox" class="task__done" :checked="data.isDone" @change="changeTaskStatus()">&nbsp;&nbsp;
        <div v-if="!data.isEditing">
            <h3 class="task__title" @dblclick="toggleTaskEditing()">{{data.title}}</h3>
            <p class="task__desc" @dblclick="toggleTaskEditing()">{{data.desc}}</p>
        </div>
        <div v-else class="add_task">
            <div class="add_task__input">
                <input type="text" v-model="data.title" @keyup.enter="toggleTaskEditing()">
                <textarea v-model="data.desc"></textarea>
            </div>
            <button class="add_task__btn" @click="toggleTaskEditing()">‚úÖ</button>
        </div>
    </div>
    `
});

var vue = new Vue({
    el: '#app',
    data() {
        return {
            filterText: '',
            hideCompleteList: false,
            isCheckAllFiltered: false,
            newTask: { title: '', desc: '', isDone: false, isEditing: false },

            taskList: [
                {
                    title: '–î–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –• –∫ 30.03.2021',
                    desc: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å –•, –∑–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É',
                    isDone: false,
                    isEditing: false
                },
                {
                    title: '–î–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –£ –∫ 30.04.2021',
                    desc: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–π—Ç Yandex',
                    isDone: false,
                    isEditing: false
                },
                {
                    title: '–î–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç Z –∫ 30.05.2021',
                    desc: '–ö—É–ø–∏—Ç—å –•',
                    isDone: true,
                    isEditing: false
                }
            ]
        }
    },
    filters: {
        strReplace(value) {
            // –∑–∞–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ. –ü–æ–∑–∂–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–µ–Ω—É –≤—Å–µ—Ö –≤—Ö–æ–∂–¥–µ–Ω–∏–π
            return value.replace('–≤–∞–∂–Ω–æ', '‚òùÔ∏è')
                .replace('—Å—Ä–æ—á–Ω–æ', 'üïë');
        }
    },
    computed: {
        doTasksCount() {
            return this.taskList.filter(task => !task.isDone).length;
        },

        checkedTasksCount() {
            return this.taskList.filter(task => task.isDone).length;
        },

        filteredList() {
            const filter = this.filterText.toLowerCase();

            return this.taskList.filter(
                task => {
                    return task.title.toLowerCase().includes(filter) ||
                        task.desc.toLowerCase().includes(filter)
                }
            );
        }
    },
    methods: {
        toggleCheckFiltered() {
            this.filteredList.forEach(element => element.isDone = !this.isCheckAllFiltered);
            this.isCheckAllFiltered = !this.isCheckAllFiltered;
        },

        clearTaskInput() {
            this.newTask = { ...this.$options.data().newTask };
        },

        changeStatusTask(task) {
            if (task) {
                task.isDone = !task.isDone;
            }
        },

        toggleTaskEditing(task) {
            if (!task) return;

            // –ï—Å–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ 
            // –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –≤ desc (emoji)
            if (task.isEditing && task.desc) {
                task.desc = this.$options.filters.strReplace(task.desc);
            }

            task.isEditing = !task.isEditing;

            /* –í–∞—Ä–∏–∞–Ω—Ç —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º prompt (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ)
            const newTaskTitle = prompt("Enter new task title: ", this.taskList[id].title);
            if (newTaskTitle) {
                this.taskList[id].title = newTaskTitle;
            } */
        },

        addTask() {
            if (!this.newTask.title) return;

            // –ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –≤ desc (emoji)
            if (this.newTask.desc) {
                this.newTask.desc = this.$options.filters.strReplace(this.newTask.desc);
            }

            this.taskList.push({ ...this.newTask });
            this.clearTaskInput();
        }
    }
});